/**************************************
DFS와 BFS
시간 제한  메모리 제한
   2 초       128 MB

문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 
단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 
정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 
다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 
입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.
**************************************/

#include <bits/stdc++.h>

using namespace std;

void bfs(int n, int v, const vector<vector<int>>& map) {
	vector<bool> visited(n + 1, false);
	queue<int> q;
	q.push(v);
	visited[v] = true;

	while (!q.empty()) {
		int c = q.front();
		q.pop();
		cout << c << " ";

		for (int i = 1; i <= n; ++i) {
			if (map[c][i] != 0 && !visited[i]) {
				q.push(i);
				visited[i] = true;
			}
		}
	}
}

void helper(const vector<vector<int>>& map, vector<bool>& visited, int n, int v) {
	cout << v << " ";

	for (int i = 1; i <= n; ++i) {
		if (map[v][i] != 0 && !visited[i]) {
			visited[i] = true;
			helper(map, visited, n, i);
		}
	}
}

void dfs(int n, int v, const vector<vector<int>>& map) {
	vector<bool> visited(n + 1, false);
	visited[v] = true;
	helper(map, visited, n, v);
}

int main(void) {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);

	int n, m, v;
	cin >> n >> m >> v;

	vector<vector<int>> map(n + 1, vector<int>(n + 1, 0));
	for (int i = 0; i < m; ++i) {
		int x, y;
		cin >> x >> y;
		map[x][y] = 1;
		map[y][x] = 1;
	}

	dfs(n, v, map);
	cout << '\n';
	bfs(n, v, map);

	return 0;
}